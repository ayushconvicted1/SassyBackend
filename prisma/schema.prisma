generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String
  avatar       Media?   @relation("UserAvatar")
  role         Role     @default(USER)
  zipCode      String?
  addressLine1 String?
  addressLine2 String?
  city         String?
  state        String?
  country      String?
  phoneNumber  String?
  cart         Cart?
  orders       Order[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([email])
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  price       Decimal
  stock       Int
  images      Media[]       @relation("ProductImages")
  isAvailable Boolean       @default(true)
  hasSizing   Boolean       @default(false) // Whether this product supports sizing
  category    Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId  Int?
  cartItems   CartItem[]
  orderItems  OrderItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  sizes       ProductSize[]
  tags        ProductTag[]

  @@index([categoryId])
}

model Media {
  id        Int      @id @default(autoincrement())
  url       String
  mimeType  String
  type      String
  createdAt DateTime @default(now())
  productId Int?
  product   Product? @relation("ProductImages", fields: [productId], references: [id], onDelete: Cascade)
  userId    Int?     @unique
  user      User?    @relation("UserAvatar", fields: [userId], references: [id], onDelete: Cascade)
}

model Size {
  id       Int           @id @default(autoincrement())
  name     String        @unique
  products ProductSize[]
}

model ProductSize {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  size      Size    @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  sizeId    Int
  stock     Int     @default(0)
}

model Tag {
  id       Int          @id @default(autoincrement())
  name     String       @unique
  products ProductTag[]
}

model ProductTag {
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     Int

  @@id([productId, tagId])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Cart {
  id     Int        @id @default(autoincrement())
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int        @unique
  items  CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int     @default(1)
}

model Order {
  id              Int         @id @default(autoincrement())
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  items           OrderItem[]
  total           Decimal
  status          String      @default("pending")
  paymentMethod   String      @default("razorpay") // "razorpay" or "cod"
  razorpayOrderId String?
  paymentId       String?
  waybillNumber   String?
  zipCode         String?
  addressLine1    String?
  addressLine2    String?
  city            String?
  state           String?
  country         String?
  phoneNumber     String?
  email           String?
  // Pricing breakdown
  subtotal        Decimal?    // Product subtotal
  shipping        Decimal?    // Shipping cost
  tax             Decimal?    // Tax amount
  offerDiscount   Decimal?    @default(0) // Offer/coupon discount
  prepaidDiscount Decimal?    @default(0) // Prepaid payment discount
  appliedDiscount Decimal?    @default(0) // Total discount (for backward compatibility)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int
  size      String?
  price     Decimal
}

model Offer {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  name        String
  description String?
  discountType DiscountType
  discountValue Decimal // Percentage (0-100) or fixed amount
  minOrderValue Decimal? // Minimum order value to apply offer
  maxDiscount Decimal? // Maximum discount amount (for percentage discounts)
  applicableTags String[] // Array of tag names that products must have
  applicableCategories String[] // Array of category names that products must have
  isActive    Boolean  @default(true)
  startDate   DateTime?
  endDate     DateTime?
  usageLimit  Int? // Maximum number of times this offer can be used
  usageCount  Int  @default(0) // Current usage count
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([code])
  @@index([isActive])
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  BOGO // Buy One Get One Free
}